name: Project Automation (Status Handling)

on:
  push:
    branches:
      - develop
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:

  move-to-testing:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from branch
        id: extract
        run: >-
                    BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          ISSUE_NUM=$(echo "$BRANCH_NAME" | cut -d'-' -f1)
          if [[ "$ISSUE_NUM" =~ ^[0-9]+$ ]]; then
            echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch format: $BRANCH_NAME"
            exit 1
          fi

      - name: Get item ID from GitHub Project
        id: find_item
        if: ${{ steps.extract.outputs.issue_number != '' }}
        run: |-
          ISSUE_NUM="${{ steps.extract.outputs.issue_number }}"

          QUERY=$(cat <<EOF
          {
            "query": "query(\$login: String!, \$projectNumber: Int!, \$issueNumber: Int!) {
              user(login: \\"Gabel1998\\") {
                projectV2(number: 3) {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                        }
                      }
                    }
                  }
                }
              }
            }",
            "variables": {
              "login": "Gabel1998",
              "projectNumber": 3,
              "issueNumber": $ISSUE_NUM
            }
          }
          EOF
          )

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.next+json" \
            -d "$QUERY" \
            https://api.github.com/graphql)

          ITEM_ID=$(echo "$RESPONSE" | jq -r ".data.user.projectV2.items.nodes[] | select(.content.number == $ISSUE_NUM) | .id")
          echo "item_id=$ITEM_ID" >> $GITHUB_OUTPUT

      - name: Update status to TESTING
        if: ${{ steps.find_item.outputs.item_id != '' }}
        run: >-
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.next+json" \
            -d '{
              "query": "mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item { id }
                }
              }",
              "variables": {
                "projectId": "PVT_kwHOCwE_ds4A1FKE",
                "itemId": "${{ steps.find_item.outputs.item_id }}",
                "fieldId": "PVTSSF_lAHOCwE_ds4A1FKEzgqm73E",
                "optionId": "9b157089"
              }
            }' https://api.github.com/graphql

  update-status-after-ci:
    if: github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    steps:
      - name: Extract info from workflow run
        id: extract
        run: >-
                    BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          ISSUE_NUM=$(echo "$BRANCH_NAME" | cut -d'-' -f1)
          if [[ "$ISSUE_NUM" =~ ^[0-9]+$ ]]; then
            echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch format: $BRANCH_NAME"
            exit 1
          fi
          echo "result=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT

      - name: Get item ID from GitHub Project
        id: find_item
        if: ${{ steps.extract.outputs.issue_number != '' }}
        run: |-
          ISSUE_NUM="${{ steps.extract.outputs.issue_number }}"

          QUERY=$(cat <<EOF
          {
            "query": "query(\$login: String!, \$projectNumber: Int!, \$issueNumber: Int!) {
              user(login: \\"Gabel1998\\") {
                projectV2(number: 3) {
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                        }
                      }
                    }
                  }
                }
              }
            }",
            "variables": {
              "login": "Gabel1998",
              "projectNumber": 3,
              "issueNumber": $ISSUE_NUM
            }
          }
          EOF
          )

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.next+json" \
            -d "$QUERY" \
            https://api.github.com/graphql)

          echo "Response: $RESPONSE"

          ITEM_ID=$(echo "$RESPONSE" | jq -r ".data.user.projectV2.items.nodes[] | select(.content.number == $ISSUE_NUM) | .id")
          echo "item_id=$ITEM_ID" >> $GITHUB_OUTPUT

      - name: Update status based on CI result
        if: ${{ steps.find_item.outputs.item_id != '' }}
        run: >-
          PROJECT_ID="PVT_kwHOCwE_ds4A1FKE"
          STATUS_FIELD_ID="PVTSSF_lAHOCwE_ds4A1FKEzgqm73E"
          ITEM_ID="${{ steps.find_item.outputs.item_id }}"
          RESULT="${{ steps.extract.outputs.result }}"

          if [ "$RESULT" = "success" ]; then
            OPTION_ID="aba860b9" # In Review
          else
            OPTION_ID="812a1021" # Ready for Test
          fi

          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.next+json" \
            -d '{
              "query": "mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item { id }
                }
              }",
              "variables": {
                "projectId": "'"$PROJECT_ID"'",
                "itemId": "'"$ITEM_ID"'",
                "fieldId": "'"$STATUS_FIELD_ID"'",
                "optionId": "'"$OPTION_ID"'"
              }
            }' https://api.github.com/graphql
